version: "3.9"

networks:
  fin-app-dev:
    driver: bridge

services:
  app: 
    container_name: finapp
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - fin-app-dev
    # environment:
    #   - ASPNETCORE_ENVIRONMENT=Docker
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    restart: always

  messagesconsumerwithdocker:
    container_name: messageconsumer
    build:
      context: ../MessagesConsumerWithDocker
      dockerfile: Dockerfile
    ports:
      - "81:81"
    networks:
      - fin-app-dev
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always

  postgres_db:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: finapdb
    networks:
      - fin-app-dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-h", "localhost", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq:
    container_name: rabbit
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - fin-app-dev
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5

  redis_cache:
    container_name: redis
    image: redis
    ports:
      - 6379:6379
    networks:
      - fin-app-dev
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3


volumes:
  postgres-data: